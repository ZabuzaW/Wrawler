package de.zabuza.webcrawler.database;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

/**
 * Utility class that links maps and their ids.
 * 
 * @author Zabuza {@literal <zabuza.dev@gmail.com>}
 *
 */
public final class MapTableDb implements Iterable<Entry<Integer, String>> {
	/**
	 * Separator character for entries in the text representation.
	 */
	public static final String ENTRY_SEPARATOR = ";";
	/**
	 * Enclosing character for values in the text representation.
	 */
	private static final String ENCLOSER = "\"";
	/**
	 * Singleton instance of this class.
	 */
	private static MapTableDb instance = null;
	/**
	 * Separator character for values in the text representation.
	 */
	private static final String VALUE_SEPARATOR = ",";

	/**
	 * Gets the singleton instance of this class.
	 * 
	 * @return Singleton instance of this class
	 */
	public static MapTableDb getInstance() {
		if (instance == null) {
			instance = new MapTableDb();
		}
		return instance;
	}

	/**
	 * Dictionary for id to map access.
	 */
	private final Map<Integer, String> idToMap = new HashMap<>();
	/**
	 * Dictionary for map to active access.
	 */
	private final Map<String, Integer> mapToActive = new HashMap<>();

	/**
	 * Dictionary for map to id access.
	 */
	private final Map<String, Integer> mapToId = new HashMap<>();

	/**
	 * Creates a new mapTableDb object.
	 */
	private MapTableDb() {
		// Generated by MapTableParseTool : mapTable.csv
		this.idToMap.put(Integer.valueOf(1), "Altis");
		this.mapToActive.put("Altis", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(2), "Aliabad");
		this.mapToActive.put("Aliabad", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(3), "Bukovina");
		this.mapToActive.put("Bukovina", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(4), "Bystrica");
		this.mapToActive.put("Bystrica", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(5), "Caribou");
		this.mapToActive.put("Caribou", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(6), "Chernarus");
		this.mapToActive.put("Chernarus", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(7), "Clafghan");
		this.mapToActive.put("Clafghan", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(8), "Imrali Island");
		this.mapToActive.put("Imrali Island", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(9), "Namalsk");
		this.mapToActive.put("Namalsk", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(10), "Southern Sahrani");
		this.mapToActive.put("Southern Sahrani", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(11), "Summer Sangin");
		this.mapToActive.put("Summer Sangin", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(12), "Virtual Reality");
		this.mapToActive.put("Virtual Reality", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(13), "Utes");
		this.mapToActive.put("Utes", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(14), "Wake Island");
		this.mapToActive.put("Wake Island", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(15), "Sahrani");
		this.mapToActive.put("Sahrani", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(16), "United Sahrani");
		this.mapToActive.put("United Sahrani", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(17), "Fallujah");
		this.mapToActive.put("Fallujah", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(18), "Abottabad");
		this.mapToActive.put("Abottabad", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(19), "Chernarus Summer");
		this.mapToActive.put("Chernarus Summer", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(20), "Porto");
		this.mapToActive.put("Porto", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(21), "Rahmadi");
		this.mapToActive.put("Rahmadi", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(22), "Takistan Mountains");
		this.mapToActive.put("Takistan Mountains", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(23), "Takistan");
		this.mapToActive.put("Takistan", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(24), "Zargabad");
		this.mapToActive.put("Zargabad", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(25), "Desert");
		this.mapToActive.put("Desert", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(26), "Proving Grounds");
		this.mapToActive.put("Proving Grounds", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(27), "Shapur");
		this.mapToActive.put("Shapur", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(28), "Stratis");
		this.mapToActive.put("Stratis", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(29), "Island Panthera");
		this.mapToActive.put("Island Panthera", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(30), "Esbekistan");
		this.mapToActive.put("Esbekistan", Integer.valueOf(0));
		this.idToMap.put(Integer.valueOf(31), "Emita");
		this.mapToActive.put("Emita", Integer.valueOf(0));
		this.idToMap.put(Integer.valueOf(32), "Lingor");
		this.mapToActive.put("Lingor", Integer.valueOf(0));
		this.idToMap.put(Integer.valueOf(33), "FDF Podagorsk");
		this.mapToActive.put("FDF Podagorsk", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(34), "Celle");
		this.mapToActive.put("Celle", Integer.valueOf(0));
		this.idToMap.put(Integer.valueOf(35), "Reshmaan Province");
		this.mapToActive.put("Reshmaan Province", Integer.valueOf(0));
		this.idToMap.put(Integer.valueOf(36), "Isla Duala");
		this.mapToActive.put("Isla Duala", Integer.valueOf(0));
		this.idToMap.put(Integer.valueOf(37), "Cicada");
		this.mapToActive.put("Cicada", Integer.valueOf(0));
		this.idToMap.put(Integer.valueOf(38), "Quesh-Kibrul");
		this.mapToActive.put("Quesh-Kibrul", Integer.valueOf(0));
		this.idToMap.put(Integer.valueOf(39), "Isola di Capraia");
		this.mapToActive.put("Isola di Capraia", Integer.valueOf(1));
		this.idToMap.put(Integer.valueOf(40), "Celle2");
		this.mapToActive.put("Celle2", Integer.valueOf(0));
		this.idToMap.put(Integer.valueOf(41), "Hazar-Kot Valley");
		this.mapToActive.put("Hazar-Kot Valley", Integer.valueOf(0));
		this.idToMap.put(Integer.valueOf(42), "Unknown");
		this.mapToActive.put("Unknown", Integer.valueOf(0));

		for (final Entry<Integer, String> entry : this.idToMap.entrySet()) {
			this.mapToId.put(entry.getValue(), entry.getKey());
		}
	}

	/**
	 * Returns the id of the given map.
	 * 
	 * @param map
	 *            Map to get id of
	 * @return Id of the map
	 */
	public Integer getId(final String map) {
		final Integer id = this.mapToId.get(map);
		if (id == null) {
			System.err.println("Database table does not know id of map: " + map);
		}
		return id;
	}

	/**
	 * Returns the map that is represented by the given id.
	 * 
	 * @param id
	 *            Id of the map
	 * @return Map that is represented by the given id
	 */
	public String getMap(final int id) {
		final String map = this.idToMap.get(Integer.valueOf(id));
		if (map == null) {
			System.err.println("Database table does not know map with id: " + id);
		}
		return map;
	}

	@Override
	public Iterator<Entry<Integer, String>> iterator() {
		return this.idToMap.entrySet().iterator();
	}

	@Override
	public String toString() {
		final StringBuilder builder = new StringBuilder();
		for (final Entry<Integer, String> entry : this.idToMap.entrySet()) {
			builder.append(ENCLOSER + entry.getKey() + ENCLOSER + VALUE_SEPARATOR);
			builder.append(ENCLOSER + entry.getValue() + ENCLOSER + VALUE_SEPARATOR);
			builder.append(ENCLOSER + this.mapToActive.get(entry.getValue()) + ENCLOSER + ENTRY_SEPARATOR);
		}
		builder.delete(builder.length() - ENTRY_SEPARATOR.length(), builder.length());
		return builder.toString();
	}

}
